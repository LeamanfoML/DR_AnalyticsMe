import logging
from aiogram import Bot, types
from aiogram.utils import markdown as md
from config import config
import asyncio

logger = logging.getLogger('notifications')

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        logger.info("NotificationManager initialized")
    
    async def send_notification(self, message: str, parse_mode: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            tasks = []
            
            if config.NOTIFICATION_CHANNEL:
                tasks.append(
                    self._safe_send_message(
                        chat_id=config.NOTIFICATION_CHANNEL,
                        text=message,
                        parse_mode=parse_mode
                    )
                )
            
            if config.ADMIN_CHAT_ID:
                tasks.append(
                    self._safe_send_message(
                        chat_id=config.ADMIN_CHAT_ID,
                        text=message,
                        parse_mode=parse_mode
                    )
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(*tasks)
            
            logger.info(f"Notification sent: {message[:50]}...")
            return True
        except Exception as e:
            logger.error(f"Failed to send notification: {e}", exc_info=True)
            return False
    
    async def send_alert(self, message: str, parse_mode: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            if config.ADMIN_CHAT_ID:
                await self._safe_send_message(
                    chat_id=config.ADMIN_CHAT_ID,
                    text=f"üö® {md.hbold('ALERT:')} {message}",
                    parse_mode=parse_mode or "HTML"
                )
                logger.warning(f"Alert sent: {message[:50]}...")
                return True
            return False
        except Exception as e:
            logger.error(f"Failed to send alert: {e}", exc_info=True)
            return False
    
    async def send_deal_notification(self, deal_data: dict):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
        try:
            text = (
                f"üí∞ {md.hbold('–ù–û–í–ê–Ø –°–î–ï–õ–ö–ê!')}\n\n"
                f"üéÅ {md.hcode(deal_data.get('gift_id', 'N/A'))}\n"
                f"üè∑ {md.hitalic(deal_data.get('name', 'N/A'))}\n"
                f"üìç {deal_data.get('source_market', '?')} ‚Üí {deal_data.get('target_market', '?')}\n"
                f"üíµ –ü–æ–∫—É–ø–∫–∞: {md.hbold(f"{deal_data.get('buy_price', 0):.2f} TON")}\n"
                f"üí∞ –ü—Ä–æ–¥–∞–∂–∞: {md.hbold(f"{deal_data.get('sell_price', 0):.2f} TON")}\n"
                f"üìà –ü—Ä–∏–±—ã–ª—å: {md.hbold(f"{deal_data.get('profit', 0):.2f} TON")}\n\n"
                f"‚ö°Ô∏è –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {deal_data.get('success_rate', 'N/A')}%\n"
                f"üõ° –ì–∞—Ä–∞–Ω—Ç–∏—è: {'‚úÖ' if deal_data.get('guaranteed', False) else '‚ùå'}"
            )
            
            # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∏—Ñ—Ç",
                    url=deal_data.get('gift_url', 'https://example.com')
                )]
            ]) if deal_data.get('gift_url') else None
            
            await self.send_notification(text, parse_mode="HTML")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Å –∫–Ω–æ–ø–∫–æ–π
            if config.NOTIFICATION_CHANNEL:
                await self._safe_send_message(
                    chat_id=config.NOTIFICATION_CHANNEL,
                    text=text,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            
            return True
        except Exception as e:
            logger.error(f"Failed to send deal notification: {e}", exc_info=True)
            return False
    
    async def _safe_send_message(self, chat_id: str, text: str, parse_mode: str = None, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                disable_web_page_preview=True,
                **kwargs
            )
            return True
        except Exception as e:
            logger.error(f"Error sending message to {chat_id}: {e}")
            return False
