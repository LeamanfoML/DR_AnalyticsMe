import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class Config:
    # Telegram API credentials
    API_ID = os.getenv("API_ID")
    API_HASH = os.getenv("API_HASH")
    PORTALS_PHONE = os.getenv("PORTALS_PHONE")
    
    # Telegram bot
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ int
    NOTIFICATION_CHANNEL = os.getenv("NOTIFICATION_CHANNEL")
    
    # Database
    DB_PATH = os.getenv("DB_PATH", "arbitrage.db")
    
    # APIs
    TONNEL_AUTH = os.getenv("TONNEL_AUTH")
    PORTALS_AUTH = os.getenv("PORTALS_AUTH")
    
    # Server
    WEB_SERVER_HOST = os.getenv("WEB_SERVER_HOST", "0.0.0.0")
    WEB_SERVER_PORT = int(os.getenv("WEB_SERVER_PORT", 8080))
    
    @classmethod
    def update_portals_auth(cls, new_auth):
        cls.PORTALS_AUTH = new_auth
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ .env –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        # with open('.env', 'a') as f:
        #     f.write(f"\nPORTALS_AUTH={new_auth}")

config = Config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def send_to_admin(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
    await bot.send_message(config.ADMIN_CHAT_ID, message)

async def send_to_channel(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    await bot.send_message(config.NOTIFICATION_CHANNEL, message)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    await message.reply("üöÄ –ë–æ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω!\n"
                       "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π")

@dp.message_handler(commands=['auth'])
async def update_auth(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id != config.ADMIN_CHAT_ID:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    args = message.get_args().split()
    if len(args) != 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auth <service> <key>\n"
                                   "–ü—Ä–∏–º–µ—Ä: /auth portals –Ω–æ–≤—ã–π_–∫–ª—é—á")
    
    service, key = args
    if service.lower() == "portals":
        config.update_portals_auth(key)
        await message.answer("‚úÖ –ö–ª—é—á Portals —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    elif service.lower() == "tonnel":
        config.TONNEL_AUTH = key
        await message.answer("‚úÖ –ö–ª—é—á Tonnel —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å")

async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await send_to_admin("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    await send_to_admin("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    logger.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(
        dp,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True
    )
