from aiogram import Bot, types
from aiogram.dispatcher.router import Router
from aiogram.dispatcher.filters import Command, StateFilter, Filter
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import State, StatesGroup

# –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è Filter
F = Filter
from database import AsyncDatabase
from config import config
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
router = Router()

class SettingsForm(StatesGroup):
    SETTING_NAME = State()
    SETTING_VALUE = State()

@router.message(Command("start"))
async def start(message: Message, db: AsyncDatabase):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = message.from_user.id == config.ADMIN_CHAT_ID
        
        text = (
            "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Arbitrage Bot!*\n\n"
            "üîç –≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞–º–∏\n\n"
            "üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/arbitrage - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º\n"
            "/resale - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å–µ–π–ª–æ–º\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "/stats - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "/history - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ]) if is_admin else None
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("arbitrage"))
async def arbitrage_control(message: Message, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º"""
    try:
        if message.from_user.id != config.ADMIN_CHAT_ID:
            return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_arbitrage")],
            [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_arbitrage")],
            [InlineKeyboardButton(text="üõ† –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º", callback_data="toggle_test_mode")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await message.answer("‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º:*", 
                            reply_markup=keyboard, 
                            parse_mode="Markdown")
                            
    except Exception as e:
        logger.error(f"Error in arbitrage control: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º")

@router.callback_query(F.data == "start_arbitrage")
async def start_arbitrage(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è ArbitrageEngine
        await callback.message.edit_text("üîç *–ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–ø—É—â–µ–Ω!* –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...", 
                                       parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error starting arbitrage: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

@router.callback_query(F.data == "stop_arbitrage")
async def stop_arbitrage(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ArbitrageEngine
        await callback.message.edit_text("‚èπ *–ê—Ä–±–∏—Ç—Ä–∞–∂ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*", 
                                       parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error stopping arbitrage: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

@router.callback_query(F.data == "toggle_test_mode")
async def toggle_test_mode(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤ ArbitrageEngine
        await callback.message.edit_text("üõ† *–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω*", 
                                       parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error toggling test mode: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞")

@router.message(Command("resale"))
async def resale_control(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å–µ–π–ª–æ–º"""
    try:
        if message.from_user.id != config.ADMIN_CHAT_ID:
            return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="enable_resale")],
            [InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="disable_resale")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="configure_resale")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await message.answer("üîÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–µ–π Resale:*", 
                           reply_markup=keyboard, 
                           parse_mode="Markdown")
                           
    except Exception as e:
        logger.error(f"Error in resale control: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–µ–π Resale")

@router.callback_query(F.data.in_(["enable_resale", "disable_resale"]))
async def toggle_resale(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ Resale"""
    try:
        enable = callback.data == "enable_resale"
        status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if enable else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è ResaleModule
        await callback.message.edit_text(f"üîÑ *Resale —Ñ—É–Ω–∫—Ü–∏—è {status}*", 
                                       parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error toggling resale: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ Resale")

@router.message(Command("settings"))
async def settings_menu(message: Message, db: AsyncDatabase):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        if message.from_user.id != config.ADMIN_CHAT_ID:
            return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        settings = await db.get_settings()
        
        text = (
            "‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: `{settings.min_price:.2f}` TON\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: `{settings.max_price:.2f}` TON\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: `{settings.min_profit:.2f}` TON\n"
            f"‚Ä¢ –†–µ—Å–µ–π–ª –æ—Ñ—Ñ—Å–µ—Ç: `{settings.resale_offset:.2f}` TON\n"
            f"‚Ä¢ Tonnel –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if settings.tonnel_enabled else '‚ùå'}\n"
            f"‚Ä¢ Portals –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if settings.portals_enabled else '‚ùå'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", callback_data="set_min_price")],
            [InlineKeyboardButton(text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", callback_data="set_max_price")],
            [InlineKeyboardButton(text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", callback_data="set_min_profit")],
            [InlineKeyboardButton(text="–û—Ñ—Ñ—Å–µ—Ç —Ä–µ—Å–µ–π–ª–∞", callback_data="set_resale_offset")],
            [InlineKeyboardButton(text="Tonnel", callback_data="toggle_tonnel")],
            [InlineKeyboardButton(text="Portals", callback_data="toggle_portals")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in settings menu: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data.startswith("toggle_"))
async def toggle_setting(callback: CallbackQuery, db: AsyncDatabase):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        setting_name = callback.data.replace("toggle_", "")
        settings = await db.get_settings()
        current_value = getattr(settings, setting_name)
        new_value = not current_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ
        await db.update_settings({setting_name: int(new_value)})
        
        status = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if new_value else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"
        await callback.message.edit_text(f"‚öôÔ∏è *{setting_name.capitalize()} {status}*", 
                                       parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error toggling setting: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

@router.callback_query(F.data.startswith("set_"))
async def request_setting_value(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        setting_name = callback.data.replace("set_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(setting_name=setting_name)
        await state.set_state(SettingsForm.SETTING_VALUE)
        
        await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è `{setting_name}`:", 
                                    parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error requesting setting value: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–Ω–∞—á–µ–Ω–∏—è")

@router.message(StateFilter(SettingsForm.SETTING_VALUE))
async def save_setting_value(message: Message, state: FSMContext, db: AsyncDatabase):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        setting_name = data.get("setting_name")
        
        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            value = float(message.text)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ
        await db.update_settings({setting_name: value})
        
        await message.answer(f"‚úÖ `{setting_name}` —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ `{value:.2f}`", 
                           parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error saving setting value: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

# ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

@router.message(Command("auth"))
async def update_auth(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id != config.ADMIN_CHAT_ID:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    args = message.get_args().split()
    if len(args) != 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auth <service> <key>\n"
                                   "–ü—Ä–∏–º–µ—Ä: /auth portals –Ω–æ–≤—ã–π_–∫–ª—é—á")
    
    service, key = args
    if service.lower() == "portals":
        config.update_portals_auth(key)
        await message.answer("‚úÖ –ö–ª—é—á Portals —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    elif service.lower() == "tonnel":
        config.TONNEL_AUTH = key
        await message.answer("‚úÖ –ö–ª—é—á Tonnel —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å")

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

@router.message(Command("history"))
async def show_history(message: Message, db: AsyncDatabase):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    try:
        deals = await db.get_deals(limit=10)
        
        if not deals:
            return await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞")
        
        text = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*\n\n"
        for deal in deals:
            text += (
                f"üÜî `{deal.gift_id}`\n"
                f"üìç {deal.source_market} ‚Üí {deal.target_market}\n"
                f"üí∞ –ü–æ–∫—É–ø–∫–∞: `{deal.buy_price:.2f}` | –ü—Ä–æ–¥–∞–∂–∞: `{deal.sell_price:.2f}`\n"
                f"üíµ –ü—Ä–∏–±—ã–ª—å: `{deal.profit:.2f}` TON\n"
                f"‚è± {deal.timestamp.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        await message.answer(text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error showing history: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫")

@router.callback_query(F("data") == "main_menu")
async def main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.delete()
        await start(callback.message, AsyncDatabase(config.DB_PATH))
    except Exception as e:
        logger.error(f"Error returning to main menu: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é")
