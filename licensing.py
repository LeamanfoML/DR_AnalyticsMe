import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import AsyncDatabase
from config import config
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
router = Router()

class LicenseActivation(StatesGroup):
    AWAITING_KEY = State()

class LicenseManager:
    def __init__(self, db: AsyncDatabase):
        self.db = db
        logger.info("LicenseManager initialized")

    async def check_license(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id == config.ADMIN_CHAT_ID:
                return True
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            license = await self.get_license(user_id)
            return license and license['is_active']
        except Exception as e:
            logger.error(f"License check error: {e}")
            return False

    async def get_license(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            'user_id': user_id,
            'license_key': 'XXXX-XXXX-XXXX-XXXX',
            'is_active': True,
            'expiry_date': '2024-12-31'
        }

    async def activate_license(self, user_id: int, license_key: str) -> bool:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        if not self._validate_key_format(license_key):
            return False
            
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ API
        is_valid = await self._validate_key(license_key)
        
        if is_valid:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
            logger.info(f"License activated for {user_id}")
            return True
        return False

    def _validate_key_format(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞"""
        pattern = r"^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$"
        return re.match(pattern, key) is not None

    async def _validate_key(self, key: str) -> bool:
        """–†–µ–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –∑–∞–ø—Ä–æ—Å –∫ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–π (–±—É–¥–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ)
# db = AsyncDatabase(config.DB_PATH)
# license_manager = LicenseManager(db)

@router.message(Command("license"))
async def license_command(message: Message, license_manager: LicenseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /license"""
    try:
        user_id = message.from_user.id
        
        if await license_manager.check_license(user_id):
            license_info = await license_manager.get_license(user_id)
            text = (
                "üîê *–í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞!*\n\n"
                f"‚Ä¢ –ö–ª—é—á: `{license_info['license_key']}`\n"
                f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: `{license_info['expiry_date']}`\n\n"
                "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /license_menu"
            )
        else:
            text = (
                "‚ö†Ô∏è *–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é. "
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "/activate <–≤–∞—à_–∫–ª—é—á>\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é: /license_menu"
            )
        
        await message.answer(text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"License command error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏")

@router.message(Command("activate"))
async def activate_license_cmd(message: Message, license_manager: LicenseManager, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ –∫–ª—é—á—É"""
    try:
        user_id = message.from_user.id
        license_key = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
        
        if not license_key:
            await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate <–ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π_–∫–ª—é—á>")
            return
            
        success = await license_manager.activate_license(user_id, license_key)
        
        if success:
            await message.answer("‚úÖ *–õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.", 
                               parse_mode="Markdown")
        else:
            await message.answer("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                               parse_mode="Markdown")
                               
    except Exception as e:
        logger.error(f"License activation error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏")

@router.message(Command("license_menu"))
async def license_menu(message: Message, license_manager: LicenseManager):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–µ–π"""
    try:
        user_id = message.from_user.id
        has_license = await license_manager.check_license(user_id)
        
        text = "üîê *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–µ–π*"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        if has_license:
            license_info = await license_manager.get_license(user_id)
            text += (
                f"\n\n‚Ä¢ –°—Ç–∞—Ç—É—Å: `–ê–∫—Ç–∏–≤–Ω–∞`\n"
                f"‚Ä¢ –ö–ª—é—á: `{license_info['license_key'][:8]}...`\n"
                f"‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: `{license_info['expiry_date']}`"
            )
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", callback_data="renew_license")]
            )
        else:
            text += "\n\n‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text="üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data="activate_license")]
            )
            
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="license_info")]
        )
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        )
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"License menu error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –ª–∏—Ü–µ–Ω–∑–∏–∏")

@router.callback_query(F.data == "activate_license")
async def activate_license_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
    try:
        await state.set_state(LicenseActivation.AWAITING_KEY)
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:")
        await callback.answer()
    except Exception as e:
        logger.error(f"License activation callback error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

@router.message(LicenseActivation.AWAITING_KEY)
async def process_license_key(message: Message, state: FSMContext, license_manager: LicenseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    try:
        user_id = message.from_user.id
        license_key = message.text.strip()
        
        success = await license_manager.activate_license(user_id, license_key)
        
        if success:
            await message.answer("‚úÖ *–õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*", parse_mode="Markdown")
        else:
            await message.answer("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel")
        
        await state.clear()
    except Exception as e:
        logger.error(f"License key processing error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–∞")
        await state.clear()

@router.callback_query(F.data == "renew_license")
async def renew_license(callback: CallbackQuery):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
        await callback.message.answer("‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await callback.answer()
    except Exception as e:
        logger.error(f"License renewal error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏")

@router.callback_query(F.data == "license_info")
async def license_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        text = (
            "üìú *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏*\n\n"
            "‚Ä¢ –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
            "‚Ä¢ –û–¥–∏–Ω –∫–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ –ü—Ä–∏ —Å–º–µ–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è\n\n"
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        )
        await callback.message.answer(text, parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.error(f"License info error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
