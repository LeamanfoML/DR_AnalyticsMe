import logging
import threading
from datetime import datetime
from telegram import Update, ParseMode
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler
from config import Config
from database import DatabaseManager
from utils.logger import setup_logger
from .keyboards import get_main_keyboard, get_settings_keyboard, get_price_range_keyboard

logger = setup_logger('bot_handlers')

class BotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ –±–æ—Ç–∞"""
    
    def __init__(self, scheduler, auth_manager):
        self.db = DatabaseManager()
        self.scheduler = scheduler
        self.auth_manager = auth_manager
        self.user_states = {}
    
    def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ NFT-–ø–æ–¥–∞—Ä–∫–æ–≤ –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏:\n"
            "‚Ä¢ Portals Market\n‚Ä¢ Tonnel Relayer Bot\n\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –≤—ã–≥–æ–¥–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö "
            "–∏ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Ä—ã–Ω–∫–µ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π.\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            "üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫\n"
            "üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–±—ã–ª–∏/–≤—Ä–µ–º–µ–Ω–∏\n"
            "‚öñÔ∏è –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π\n"
            "üíæ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        update.message.reply_text(
            welcome_message,
            reply_markup=get_main_keyboard()
        )
    
    def show_arbitrage(self, update: Update, context: CallbackContext, sort_by='profit'):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        opportunities = self.db.get_arbitrage_opportunities(sort_by)
        
        if not opportunities:
            update.callback_query.edit_message_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                reply_markup=get_main_keyboard()
            )
            return
        
        message = "<b>üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\n"
        for idx, opp in enumerate(opportunities[:10], 1):
            nft_id, name, model, end_time, bid, portals_price, _, profit, price_range = opp
            end_time_str = datetime.fromtimestamp(end_time).strftime('%d.%m.%Y %H:%M')
            
            message += (
                f"<b>{idx}. {name} ({model})</b>\n"
                f"‚è± –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time_str}\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {bid:.2f} TON\n"
                f"üè∑ Portals —Ü–µ–Ω–∞: {portals_price:.2f} TON\n"
                f"üíµ –ü—Ä–∏–±—ã–ª—å: <b>{profit:.2f} TON</b>\n"
                f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: {price_range} TON\n\n"
            )
        
        message += f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>"
        
        update.callback_query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )
    
    def button_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        query.answer()
        
        data = query.data
        
        if data == 'refresh_data':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def refresh_task():
                count = self.scheduler.force_update()
                query.edit_message_text(
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n–ù–∞–π–¥–µ–Ω–æ {count} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
                    reply_markup=get_main_keyboard()
                )
            
            threading.Thread(target=refresh_task).start()
            query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        elif data == 'sort_profit':
            self.show_arbitrage(update, context, sort_by='profit')
        
        elif data == 'sort_time':
            self.show_arbitrage(update, context, sort_by='time')
        
        elif data == 'settings':
            query.edit_message_text(
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –±–æ—Ç–∞",
                parse_mode=ParseMode.HTML,
                reply_markup=get_settings_keyboard()
            )
        
        elif data == 'refresh_tokens':
            def refresh_tokens_task():
                portals_success = self.auth_manager.refresh_portals_token()
                tonnel_success = self.auth_manager.refresh_tonnel_token()
                status = "‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" if portals_success and tonnel_success else "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"
                query.edit_message_text(status, reply_markup=get_settings_keyboard())
            
            threading.Thread(target=refresh_tokens_task).start()
            query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")
        
        elif data == 'main_menu':
            query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_keyboard()
            )
    
    def error_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error: {context.error}")
        
        if update and update.effective_chat:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
